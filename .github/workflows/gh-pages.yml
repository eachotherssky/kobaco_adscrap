name: deploy-pages

on:
  push:
    branches: [main]            # main 브랜치 푸시 때마다 실행

permissions:
  contents: write              # gh-pages 브랜치에 푸시할 권한 부여

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    # env 설정 추가(firebase key)
    env:
      VITE_FB_API_KEY:        ${{ secrets.VITE_FB_API_KEY }}
      VITE_FB_AUTH_DOMAIN:    ${{ secrets.VITE_FB_AUTH_DOMAIN }}
      VITE_FB_PROJECT_ID:     ${{ secrets.VITE_FB_PROJECT_ID }}
      VITE_FB_STORAGE_BUCKET: ${{ secrets.VITE_FB_STORAGE_BUCKET }}
    
    # 모든 run 스텝이 서브폴더에서 실행되도록 지정
    defaults:
      run:
        working-directory: frontend/ad-scrap

    steps:
      # 1) 소스 체크아웃
      - uses: actions/checkout@v4

      # 2) Node 설치
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3) pnpm 10 설치
      - uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      # 4) 의존성 설치 (lockfile 검사 유지)
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 5) 빌드 (Vite → dist 폴더 생성)
      - name: Build
        run: pnpm run build

      # 6) 키 노출 검사 ─ 빌드 직후 / 배포 직전
      - name: Fail if Firebase key leaked     # 6번 스텝
        if: github.ref != 'refs/heads/main'   # main 배포라면 건너뜀
        run: |
          if grep -R "AIza" dist; then
            echo "API key detected in bundle" >&2
            exit 1
          fi

      # 7) GitHub Pages 배포
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages                    # 배포 브랜치
          folder: frontend/ad-scrap/dist      # 빌드 산출물 경로
          clean: true                         # 이전 파일 모두 제거
